#!/usr/bin/env lua
local os = require("os")
local function mkdir(path)
  _G.assert((nil ~= path), "Missing argument path on fun.fnl:3")
  return os.execute(("mkdir " .. path))
end
local function init(path, _3fopts)
  if not path then
    return print("Please provide a path.")
  else
    print("Initializing...")
    print(("Creating a fun project at: " .. path))
    mkdir(path)
    local srcpath = (path .. "/src/")
    local buildpath = (path .. "/build/")
    mkdir(srcpath)
    mkdir(buildpath)
    os.execute(("echo '(print :hello-world)' >> " .. srcpath .. "main.fnl"))
    os.execute(("touch " .. path .. "/Makefile"))
    return os.execute(("cd " .. path .. " && git init > /dev/null 2>&1"))
  end
end
local command_table = {init = init}
local function subseq(t, start)
  _G.assert((nil ~= start), "Missing argument start on fun.fnl:24")
  _G.assert((nil ~= t), "Missing argument t on fun.fnl:24")
  local result = {}
  for i = start, #t do
    table.insert(result, t[i])
  end
  return result
end
local function process_command(command, args)
  _G.assert((nil ~= args), "Missing argument args on fun.fnl:30")
  _G.assert((nil ~= command), "Missing argument command on fun.fnl:30")
  local handler = command_table[command]
  if handler then
    return handler(args[1], subseq(args, 2))
  else
    return print("Unknown command.")
  end
end
local function take_args()
  local argv = {}
  if (#arg > 0) then
    for i, v in ipairs(arg) do
      table.insert(argv, v)
    end
  else
  end
  return argv
end
local argv = take_args()
local cmd = argv[1]
table.remove(argv, 1)
return process_command(cmd, argv)
